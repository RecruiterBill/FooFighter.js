/**
 * app.js
 *
 * FooFighter.js â€” Primary Game Controller
 *
 * Purpose of this module is to initialize the game assets,
 * build game environment and entities, and emit Phaser events
 * (via Shout object).
 */

;(function( FooFighter, Phaser, BUILDNUM ){

'use strict';

var app,
    game,
    gameState;

app = {
    /**
     * Preload game assets (spritesheets, atlas data, individuals images)
     * @return {void}
     */
    preload: function(){
        var entities        = gameState.entities,
            modules         = gameState.modules,
            background      = game.add.group(),
            backGroup       = game.add.group(),
            frontGroup      = game.add.group(),
            bigAsteroids    = game.add.group(),
            smallAsteroids  = game.add.group(),
            enemyShips      = game.add.group(),
            enemyUFOs       = game.add.group(),
            lasers          = game.add.group(),
            enemyLasers     = game.add.group(),
            hudGroup        = game.add.group();

        // Keep group references so we can maintain a proper display index
        gameState.groups = {
            background: background,
            backGroup: backGroup,
            frontGroup: frontGroup,
            hudGroup: hudGroup,
            asteroids: [
                bigAsteroids,
                smallAsteroids
            ],
            enemyShips: enemyShips,
            enemyUFOs: enemyUFOs,
            lasers: lasers,
            enemyLasers: enemyLasers
        };

        game.load.bitmapFont('KenPixel', 'assets/fonts/KenPixel.png', 'assets/fonts/KenPixel.fnt');

        // Grab keyboard references for keydown events
        gameState.cursors = game.input.keyboard.createCursorKeys();
        gameState.keyboard = game.input.keyboard;

        // Primary spritesheet -- atlas generated by Texture Packer
        game.load.atlasJSONHash(
            'sprites',
            'assets/img/space-sheet.png?d=' + BUILDNUM,
            'assets/json/space-sheet.json?d=' + BUILDNUM
        );

        // Set scale mode to strech to browser window, but preserve aspect ratio
        game.stage.scaleMode = Phaser.StageScaleMode.SHOW_ALL;
        game.stage.scale.setShowAll();
        game.stage.scale.refresh();

        game.stage.backgroundColor = '#301404';

        // Create discrete game objects/entities
        gameState.gameEngine = new FooFighter.GameEngine(gameState);
        modules.startScreen = new FooFighter.StartScreen(gameState, hudGroup);
        entities.starField = new FooFighter.StarField(gameState, background);
        entities.player = new FooFighter.Player(gameState, frontGroup);
        entities.score = new FooFighter.Score(gameState, hudGroup);
        entities.timer = new FooFighter.Timer(gameState, hudGroup);
    },

    /**
     * Initialize game state (data, canvas, etc)
     * @return {void}
     */
    create: function(){
        gameState.vent.emit('create');
    },

    /**
     * Primary game loop
     * @return {void}
     */
    update: function(){
        gameState.vent.emit('update');
    }
};

game = new Phaser.Game(
    1280,
    768,
    Phaser.AUTO,
    'main',
    {
        preload: app.preload,
        create: app.create,
        update: app.update
    }
);

gameState = FooFighter._gs = new FooFighter.GameState(game);

})(FooFighter, Phaser, window.BUILDNUM);
